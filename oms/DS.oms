val mySeed = Val[Int]
val initialPopulation = Val[Int]
val infectiousPeriod = Val[Int]
val immunityPeriod = Val[Int]
val vaccinationRate = Val[Double]
val socialDistancingLevels = Val[Int]
val CumulativeSick = Val[Double]
val CumulativeSusceptible = Val[Double]
val CumulativeVaccinated = Val[Double]
val CumulativeImmune = Val[Double]
val ProportionSick = Val[Double]
val ProportionVaccinated = Val[Double]
val ProportionSusceptible = Val[Double]
val ProportionImmune = Val[Double]
val CumulativePopulation = Val[Double]

val env =
    SGEEnvironment(
        "ucfnjka",
        "myriad.rc.ucl.ac.uk",
        sshProxy = SSHProxy("ucfnjka", "ssh-gateway.ucl.ac.uk"),
        workDirectory = "${TMPDIR}"
    )

val launch = List("setup", "random-seed ${mySeed}", "while [ticks < 8760] [go]")

val dissertation_v4_6Task = NetLogo6Task(
  workDirectory / "dissertation_v4_6.nlogo",
  launch,
  embedWorkspace = false,
  seed = mySeed
) set (
  inputs += (mySeed),
  inputs += initialPopulation mapped "initial-population",
  inputs += infectiousPeriod mapped "infectious-period",
  inputs += immunityPeriod mapped "immunity-period",
  inputs += vaccinationRate mapped "vaccination-rate",
  inputs += socialDistancingLevels mapped "social-distancing-levels",
  outputs += CumulativeSick mapped "report-cumulative-sick",
  outputs += CumulativeSusceptible mapped "report-cumulative-susceptible",
  outputs += CumulativeVaccinated mapped "report-cumulative-vaccinated",
  outputs += CumulativeImmune mapped "report-cumulative-immune",
  outputs += ProportionSick mapped "report-proportion-sick",
  outputs += ProportionVaccinated mapped "report-proportion-vaccinated",
  outputs += ProportionSusceptible mapped "report-proportion-susceptible",
  outputs += ProportionImmune mapped "report-proportion-immune",
  outputs += CumulativePopulation mapped "report-cumulative-population",

  // Default values. Can be removed if OpenMOLEVals are set by values coming from the workflow
  mySeed := 0,
  initialPopulation := 1500
)

val replications = Replication(
    evaluation = dissertation_v4_6Task on env by 10, // the model to run
    seed = mySeed,         // the seed variable
    sample = 125,          // the number of model executions
    aggregation = Seq(
        ProportionSick aggregate average,
        ProportionVaccinated aggregate average,
        ProportionSusceptible aggregate average,
        ProportionImmune aggregate average,
        CumulativeSick aggregate average,
        CumulativeSusceptible aggregate average,
        CumulativeVaccinated aggregate average,
        CumulativeImmune aggregate average,
        CumulativePopulation aggregate average
    )
)

// Define the grid sampling task
val exploration = DirectSampling(
    evaluation = replications, // here we evaluate the Replication task for each value of the sampling
    sampling =
        (infectiousPeriod in (2 to 4 by 1)) x
        (immunityPeriod in (7 to 9 by 1)) x
        (vaccinationRate in (0.0 to 0.005 by 0.0025)) x
        (socialDistancingLevels in (1 to 3 by 1))
)

// Workflow
exploration hook (workDirectory / "DS.csv")