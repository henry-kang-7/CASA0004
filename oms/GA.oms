val mySeed = Val[Int]
val initialPopulation = Val[Int]
val infectiousPeriod = Val[Double]
val immunityPeriod = Val[Double]
val vaccinationRate = Val[Double]
val socialDistancingLevels = Val[Double]
val CumulativeSick = Val[Double]
val CumulativeSusceptible = Val[Double]
val CumulativeVaccinated = Val[Double]
val CumulativeImmune = Val[Double]
val ProportionSick = Val[Double]
val ProportionVaccinated = Val[Double]
val ProportionSusceptible = Val[Double]
val ProportionImmune = Val[Double]
val CumulativePopulation = Val[Double]

val env =
    SGEEnvironment(
        "ucfnjka",
        "myriad.rc.ucl.ac.uk",
        sshProxy = SSHProxy("ucfnjka", "ssh-gateway.ucl.ac.uk"),
        workDirectory = "${TMPDIR}"
    )

val launch = List("setup", "random-seed ${mySeed}", "while [ticks < 8760] [go]")

val dissertation_v4_4Task = NetLogo6Task(
  workDirectory / "dissertation_v4_4.nlogo",
  launch,
  embedWorkspace = false,
  seed = mySeed
) set (
  inputs += (mySeed),
  inputs += initialPopulation mapped "initial-population",
  inputs += infectiousPeriod mapped "infectious-period",
  inputs += immunityPeriod mapped "immunity-period",
  inputs += vaccinationRate mapped "vaccination-rate",
  inputs += socialDistancingLevels mapped "social-distancing-levels",
  outputs += CumulativeSick mapped "report-cumulative-sick",
  outputs += CumulativeSusceptible mapped "report-cumulative-susceptible",
  outputs += CumulativeVaccinated mapped "report-cumulative-vaccinated",
  outputs += CumulativeImmune mapped "report-cumulative-immune",
  outputs += ProportionSick mapped "report-proportion-sick",
  outputs += ProportionVaccinated mapped "report-proportion-vaccinated",
  outputs += ProportionSusceptible mapped "report-proportion-susceptible",
  outputs += ProportionImmune mapped "report-proportion-immune",
  outputs += CumulativePopulation mapped "report-cumulative-population",

  // Default values. Can be removed if OpenMOLEVals are set by values coming from the workflow
  mySeed := 0,
  initialPopulation := 1500
)

NSGA2Evolution(
  evaluation = dissertation_v4_4Task on env by 10,
  genome = Seq(
      infectiousPeriod in (2.0,4.0), 
      immunityPeriod in (4.0,6.0), 
      vaccinationRate in (0.0,0.005),
      socialDistancingLevels in (1.0 to 3.0)
      ),
  objective = Seq(ProportionSick, ProportionVaccinated),
  stochastic = Stochastic(seed = mySeed),
  termination = 10000,
  parallelism = 200
) hook (workDirectory / "results")